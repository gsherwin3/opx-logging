#!/usr/bin/env python

import sys
import subprocess
import os

ROOT_PATH = "%s/usr/bin/" % os.environ.get("OPX_INSTALL_PATH","") 

enable ="1"
disable ="0"

str_to_id_map = {}
lvlstr_to_id_map = {}
sublvlstr_to_id_map = {}

def populate_string_to_id_map():
    p = subprocess.check_output(ROOT_PATH+"opx_logging_cli_tool info", shell=True)
    for i in p.split("\n"):
        l = i.split()
        if len(l) >0 and l[0] and "=" not in l[0] and l[0] == "Module":
            id_type = 1
        if len(l) >0 and l[0] and "=" not in l[0] and l[0] == "Log" and l[1] == "Level":
            id_type = 2
        if len(l) >0 and l[0] and "=" not in l[0] and l[0] == "Log" and l[1] == "Sub" and l[2] == "Level":
            id_type = 3

        if id_type == 1:
            if len(l) > 0 and l[0] and "=" not in l[0] and l[0] != "Log" and l[0] != "Module":
                 str_to_id_map[l[0]] = l[1]
        if (id_type == 2):
            if len(l) > 0 and l[0] and "=" not in l[0] and l[0] != "Log" and l[0] != "Module":
                 lvlstr_to_id_map[l[0]] = l[1]
        if (id_type == 3):
            if len(l) > 0 and l[0] and "=" not in l[0] and l[0] != "Log" and l[0] != "Module":
                 sublvlstr_to_id_map[l[0]] = l[1]

def get_lvl_str(arg_str):
    if arg_str.isdigit():
        return arg_str
    elif arg_str in lvlstr_to_id_map:
        return lvlstr_to_id_map[arg_str]
    else:
        print "Invalid log level " + str(arg_str)
        sys.exit()

def get_sublvl_str(arg_str):
    if arg_str.isdigit():
        return arg_str
    elif arg_str in sublvlstr_to_id_map:
        return sublvlstr_to_id_map[arg_str]
    else:
        print "Invalid log sub level " + str(arg_str)
        sys.exit()

def get_module_str(arg_str):
    if arg_str.isdigit():
        return arg_str
    elif arg_str in str_to_id_map:
        return str_to_id_map[arg_str]
    else:
        print "Invalid log module " + str(arg_str)
        sys.exit()

def show_id():
    os.system(ROOT_PATH+"opx_logging_cli_tool info")

def usage():
    print ""
    print "======================================================================================================================"
    print  "[show-id]                                                  - displays ids of modules, log-levels and sub-levels"
    print  "[show] [all] | [module-id] {log-level} {log-sub-level}     - displays current logging status for all/given "
    print  "                                                             sub-sytem/given module and log-level/given"
    print  "                                                             module, log-level and sub-log-level"
    print  "[enable] [all] | [module-id] {log-level } {log-sub-level}  - Enables logging status for all/given "
    print  "                                                             sub-sytem/given module and log-level/given "
    print  "                                                             module, log-level and sub-log-level"
    print  "[disable] [all] | [module-id] {log-level } {log-sub-level} - Disables logging status for all/given "
    print  "                                                             sub-sytem/given module and log-level/given "
    print  "                                                             module, log-level and sub-log-level\n"
    print  "[set] | [module-id] {log-level }                           - Sets the log level for given module to given "
    print  "                                                             log level"
    print  "NOTE :1. For enable and disable log-level and log-sub-level is optional when using module-id."
    print  "         If only module-id is given it will enable/disable all log-levels and log-sub-levels for that  "
    print  "         module-id, similarly if module-id and log-level is given, it will enable All log-sublevel for "
    print  "         the module-id and log-level\n"
    print  "      2. Instead of Module Ids now you can use the module name as string as well, for eg."
    print  "         opx-logging enable L3_SERVICES "
    print "======================================================================================================================="
    print ""
    sys.exit()


def arg_validation():
    if len(sys.argv) == 1:
        usage()
    if sys.argv[1] == "load":
        return;
    if sys.argv[1] != "set" and sys.argv[1] != "show" and sys.argv[1] != "enable" and sys.argv[1] != "disable" and sys.argv[1] != "console" and sys.argv[1] != "show-id" :
        usage()
    if (sys.argv[1] == "show" or sys.argv[1] == "enable" or sys.argv[1] == "disable") and len(sys.argv) < 3:
        usage()
    if (sys.argv[1] == "set" and len(sys.argv) < 4):
        usage()


def parse_args():
    arg_str = ""
    if sys.argv[2] == "all":
        arg_str = "-1 -1 -1"
        return arg_str

    if len(sys.argv) ==3 :
        arg_str = get_module_str(sys.argv[2]) +" -1 -1"
        return arg_str
    elif len(sys.argv) ==4 :
        arg_str = get_module_str(sys.argv[2])+" "+get_lvl_str(sys.argv[3])+" -1"
        return arg_str
    elif len(sys.argv) ==5 :
        arg_str = get_module_str(sys.argv[2])+" "+get_lvl_str(sys.argv[3])+" "+get_sublvl_str(sys.argv[4])
        return arg_str
    else:
        print ""
        print "Error :: Invalid system/log_level id/log sublevel id"
        show_id()

def logging_cli_handler():
    populate_string_to_id_map()
    if sys.argv[1] == "load":
        os.system(ROOT_PATH+"opx_logging_cli_tool load")
    if sys.argv[1] == "show":
        os.system(ROOT_PATH+"opx_logging_cli_tool show "+parse_args())
    if sys.argv[1] == "enable":
        os.system(ROOT_PATH+"opx_logging_cli_tool enable "+parse_args())
    if sys.argv[1] == "disable":
        os.system(ROOT_PATH+"opx_logging_cli_tool disable "+parse_args())
    if sys.argv[1] == "show-id":
        show_id()
    if sys.argv[1] == "set":
        os.system(ROOT_PATH+"opx_logging_cli_tool set "+parse_args())

def main():
    arg_validation()
    logging_cli_handler()

if __name__ == '__main__':
    main()
